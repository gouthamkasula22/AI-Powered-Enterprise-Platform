"""Add all authentication models

Revision ID: d60c24761b24
Revises: 79ecf7294797
Create Date: 2025-09-09 01:13:25.175100

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd60c24761b24'
down_revision = '79ecf7294797'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('otp_verifications',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(length=10), nullable=False),
    sa.Column('purpose', sa.Enum('email_verification', 'password_reset', 'mfa', 'login_verification', name='otp_purpose_enum'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('is_blocked', sa.Boolean(), nullable=False),
    sa.Column('sent_to', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('attempts <= max_attempts', name='valid_attempt_count'),
    sa.CheckConstraint('max_attempts > 0', name='positive_max_attempts'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('otp_verifications', schema=None) as batch_op:
        batch_op.create_index('idx_otp_code_active', ['code', 'is_used'], unique=False)
        batch_op.create_index('idx_otp_expires', ['expires_at'], unique=False)
        batch_op.create_index('idx_otp_user_active', ['user_id', 'is_used', 'expires_at'], unique=False)
        batch_op.create_index('idx_otp_user_purpose', ['user_id', 'purpose'], unique=False)
        batch_op.create_index(batch_op.f('ix_otp_verifications_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_otp_verifications_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_otp_verifications_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_otp_verifications_is_used'), ['is_used'], unique=False)
        batch_op.create_index(batch_op.f('ix_otp_verifications_purpose'), ['purpose'], unique=False)
        batch_op.create_index(batch_op.f('ix_otp_verifications_user_id'), ['user_id'], unique=False)

    op.create_table('password_history',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('strength_score', sa.Float(), nullable=True),
    sa.Column('entropy', sa.Float(), nullable=True),
    sa.Column('length', sa.Integer(), nullable=False),
    sa.Column('has_uppercase', sa.Boolean(), nullable=False),
    sa.Column('has_lowercase', sa.Boolean(), nullable=False),
    sa.Column('has_digits', sa.Boolean(), nullable=False),
    sa.Column('has_symbols', sa.Boolean(), nullable=False),
    sa.Column('is_compromised', sa.Boolean(), nullable=False),
    sa.Column('compromise_source', sa.String(length=100), nullable=True),
    sa.Column('policy_compliant', sa.Boolean(), nullable=False),
    sa.Column('policy_violations', sa.Text(), nullable=True),
    sa.Column('set_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('replaced_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('change_reason', sa.String(length=100), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('entropy IS NULL OR entropy >= 0', name='positive_entropy'),
    sa.CheckConstraint('length > 0', name='positive_length'),
    sa.CheckConstraint('strength_score IS NULL OR (strength_score >= 0 AND strength_score <= 1)', name='valid_strength_score'),
    sa.CheckConstraint('usage_count >= 0', name='non_negative_usage'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('password_history', schema=None) as batch_op:
        batch_op.create_index('idx_password_compliance', ['policy_compliant', 'user_id'], unique=False)
        batch_op.create_index('idx_password_compromised', ['is_compromised', 'user_id'], unique=False)
        batch_op.create_index('idx_password_strength', ['strength_score'], unique=False)
        batch_op.create_index('idx_password_user_active', ['user_id', 'replaced_at'], unique=False)
        batch_op.create_index('idx_password_user_set', ['user_id', 'set_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_history_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_history_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_password_history_is_compromised'), ['is_compromised'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_history_set_at'), ['set_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_history_user_id'), ['user_id'], unique=False)

    op.create_table('social_accounts',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('provider', sa.Enum('google', 'facebook', 'twitter', 'linkedin', 'github', 'microsoft', 'apple', 'discord', 'spotify', 'twitch', name='social_provider_enum'), nullable=False),
    sa.Column('provider_id', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('profile_picture_url', sa.String(length=500), nullable=True),
    sa.Column('access_token', sa.Text(), nullable=True),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('token_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('provider_data', sa.Text(), nullable=True),
    sa.Column('scope', sa.String(length=500), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('share_email', sa.Boolean(), nullable=False),
    sa.Column('share_profile', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('provider IS NOT NULL AND provider_id IS NOT NULL', name='provider_info_required'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('social_accounts', schema=None) as batch_op:
        batch_op.create_index('idx_social_email_provider', ['email', 'provider'], unique=False)
        batch_op.create_index('idx_social_last_login', ['last_login'], unique=False)
        batch_op.create_index('idx_social_primary', ['user_id', 'is_primary'], unique=False)
        batch_op.create_index('idx_social_provider_id', ['provider', 'provider_id'], unique=False)
        batch_op.create_index('idx_social_user_provider', ['user_id', 'provider'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_social_accounts_provider'), ['provider'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_provider_id'), ['provider_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_social_accounts_user_id'), ['user_id'], unique=False)

    op.create_table('user_sessions',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_accessed', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('device_fingerprint', sa.String(length=255), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('is_mfa_verified', sa.Boolean(), nullable=False),
    sa.Column('mfa_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('login_method', sa.String(length=50), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("ip_address IS NULL OR ip_address ~ '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$|^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$'", name='valid_ip_format'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index('idx_session_expires', ['expires_at'], unique=False)
        batch_op.create_index('idx_session_ip_time', ['ip_address', 'created_at'], unique=False)
        batch_op.create_index('idx_session_token_active', ['session_token', 'is_active'], unique=False)
        batch_op.create_index('idx_session_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_last_accessed'), ['last_accessed'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_refresh_token'), ['refresh_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_session_token'), ['session_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_user_id'), ['user_id'], unique=False)

    op.create_table('login_history',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('login_type', sa.Enum('password', 'social_google', 'social_facebook', 'social_linkedin', 'mfa', 'token_refresh', name='login_type_enum'), nullable=False),
    sa.Column('result', sa.Enum('success', 'failed_password', 'failed_user_not_found', 'failed_account_locked', 'failed_account_disabled', 'failed_mfa', 'failed_rate_limit', name='login_result_enum'), nullable=False),
    sa.Column('email_attempted', sa.String(length=255), nullable=True),
    sa.Column('username_attempted', sa.String(length=50), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('device_fingerprint', sa.String(length=255), nullable=True),
    sa.Column('country', sa.String(length=2), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True),
    sa.Column('is_suspicious', sa.Boolean(), nullable=False),
    sa.Column('failure_reason', sa.Text(), nullable=True),
    sa.Column('mfa_method', sa.String(length=50), nullable=True),
    sa.Column('mfa_successful', sa.Boolean(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('duration_ms IS NULL OR duration_ms >= 0', name='positive_duration'),
    sa.CheckConstraint('risk_score IS NULL OR (risk_score >= 0 AND risk_score <= 1)', name='valid_risk_score'),
    sa.ForeignKeyConstraint(['session_id'], ['user_sessions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('login_history', schema=None) as batch_op:
        batch_op.create_index('idx_login_email_result', ['email_attempted', 'result'], unique=False)
        batch_op.create_index('idx_login_ip_time', ['ip_address', 'created_at'], unique=False)
        batch_op.create_index('idx_login_suspicious', ['is_suspicious', 'created_at'], unique=False)
        batch_op.create_index('idx_login_time_result', ['created_at', 'result'], unique=False)
        batch_op.create_index('idx_login_type_result', ['login_type', 'result'], unique=False)
        batch_op.create_index('idx_login_user_result', ['user_id', 'result'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_country'), ['country'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_email_attempted'), ['email_attempted'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_login_history_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_is_suspicious'), ['is_suspicious'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_login_type'), ['login_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_result'), ['result'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_login_history_username_attempted'), ['username_attempted'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('login_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_login_history_username_attempted'))
        batch_op.drop_index(batch_op.f('ix_login_history_user_id'))
        batch_op.drop_index(batch_op.f('ix_login_history_session_id'))
        batch_op.drop_index(batch_op.f('ix_login_history_result'))
        batch_op.drop_index(batch_op.f('ix_login_history_login_type'))
        batch_op.drop_index(batch_op.f('ix_login_history_is_suspicious'))
        batch_op.drop_index(batch_op.f('ix_login_history_ip_address'))
        batch_op.drop_index(batch_op.f('ix_login_history_id'))
        batch_op.drop_index(batch_op.f('ix_login_history_email_attempted'))
        batch_op.drop_index(batch_op.f('ix_login_history_created_at'))
        batch_op.drop_index(batch_op.f('ix_login_history_country'))
        batch_op.drop_index('idx_login_user_result')
        batch_op.drop_index('idx_login_type_result')
        batch_op.drop_index('idx_login_time_result')
        batch_op.drop_index('idx_login_suspicious')
        batch_op.drop_index('idx_login_ip_time')
        batch_op.drop_index('idx_login_email_result')

    op.drop_table('login_history')
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_sessions_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_session_token'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_refresh_token'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_last_accessed'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_is_active'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_ip_address'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_expires_at'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_created_at'))
        batch_op.drop_index('idx_session_user_active')
        batch_op.drop_index('idx_session_token_active')
        batch_op.drop_index('idx_session_ip_time')
        batch_op.drop_index('idx_session_expires')

    op.drop_table('user_sessions')
    with op.batch_alter_table('social_accounts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_social_accounts_user_id'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_provider_id'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_provider'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_id'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_email'))
        batch_op.drop_index(batch_op.f('ix_social_accounts_created_at'))
        batch_op.drop_index('idx_social_user_provider')
        batch_op.drop_index('idx_social_provider_id')
        batch_op.drop_index('idx_social_primary')
        batch_op.drop_index('idx_social_last_login')
        batch_op.drop_index('idx_social_email_provider')

    op.drop_table('social_accounts')
    with op.batch_alter_table('password_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_password_history_user_id'))
        batch_op.drop_index(batch_op.f('ix_password_history_set_at'))
        batch_op.drop_index(batch_op.f('ix_password_history_is_compromised'))
        batch_op.drop_index(batch_op.f('ix_password_history_id'))
        batch_op.drop_index(batch_op.f('ix_password_history_created_at'))
        batch_op.drop_index('idx_password_user_set')
        batch_op.drop_index('idx_password_user_active')
        batch_op.drop_index('idx_password_strength')
        batch_op.drop_index('idx_password_compromised')
        batch_op.drop_index('idx_password_compliance')

    op.drop_table('password_history')
    with op.batch_alter_table('otp_verifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_otp_verifications_user_id'))
        batch_op.drop_index(batch_op.f('ix_otp_verifications_purpose'))
        batch_op.drop_index(batch_op.f('ix_otp_verifications_is_used'))
        batch_op.drop_index(batch_op.f('ix_otp_verifications_id'))
        batch_op.drop_index(batch_op.f('ix_otp_verifications_expires_at'))
        batch_op.drop_index(batch_op.f('ix_otp_verifications_created_at'))
        batch_op.drop_index('idx_otp_user_purpose')
        batch_op.drop_index('idx_otp_user_active')
        batch_op.drop_index('idx_otp_expires')
        batch_op.drop_index('idx_otp_code_active')

    op.drop_table('otp_verifications')
    # ### end Alembic commands ###
