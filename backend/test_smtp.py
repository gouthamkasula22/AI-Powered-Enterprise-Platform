#!/usr/bin/env python3
"""
SMTP Configuration Test Script

This script helps you test your SMTP configuration before using it 
in the main application. Run this script to verify your email settings work.
"""

import asyncio
import sys
from pathlib import Path

# Add the app directory to path so we can import our modules
sys.path.insert(0, str(Path(__file__).parent))

from app.core.config import settings
from app.services.email_service import email_service


async def test_smtp_connection():
    """Test SMTP connection with current settings"""
    print("üîß Testing SMTP Connection...")
    print(f"Host: {settings.SMTP_HOST}")
    print(f"Port: {settings.SMTP_PORT}")
    print(f"Username: {settings.SMTP_USERNAME}")
    print(f"TLS: {settings.SMTP_USE_TLS}")
    print(f"SSL: {settings.SMTP_USE_SSL}")
    print("-" * 50)
    
    try:
        connection_result = await email_service.test_connection()
        if connection_result:
            print("‚úÖ SMTP connection successful!")
            return True
        else:
            print("‚ùå SMTP connection failed!")
            return False
    except Exception as e:
        print(f"‚ùå SMTP connection error: {str(e)}")
        return False


async def send_test_email(recipient_email: str | None = None):
    """Send a test email"""
    if not recipient_email:
        recipient_email = input("Enter recipient email address: ").strip()
    
    if not recipient_email:
        print("‚ùå No recipient email provided!")
        return False
    
    print(f"üìß Sending test email to: {recipient_email}")
    
    html_content = """
    <html>
        <body>
            <h2>üéâ SMTP Test Email</h2>
            <p>Congratulations! Your SMTP configuration is working correctly.</p>
            <p>This is a test email from your User Authentication System.</p>
            <hr>
            <p><small>Generated by SMTP Test Script</small></p>
        </body>
    </html>
    """
    
    text_content = """
    üéâ SMTP Test Email
    
    Congratulations! Your SMTP configuration is working correctly.
    This is a test email from your User Authentication System.
    
    ---
    Generated by SMTP Test Script
    """
    
    try:
        result = await email_service.send_email(
            to_email=recipient_email,
            subject="üîß SMTP Configuration Test",
            html_content=html_content,
            text_content=text_content
        )
        
        if result:
            print("‚úÖ Test email sent successfully!")
            return True
        else:
            print("‚ùå Failed to send test email!")
            return False
    except Exception as e:
        print(f"‚ùå Email sending error: {str(e)}")
        return False


async def test_template_email(recipient_email: str | None = None):
    """Test template-based email sending"""
    if not recipient_email:
        recipient_email = input("Enter recipient email address: ").strip()
    
    if not recipient_email:
        print("‚ùå No recipient email provided!")
        return False
    
    print(f"üìß Sending template test email to: {recipient_email}")
    
    try:
        # Test welcome email template
        from app.services.email_service import send_welcome_email
        
        result = await send_welcome_email(
            user_email=recipient_email,
            user_name="Test User",
            verification_token="test-token-123"
        )
        
        if result:
            print("‚úÖ Template email sent successfully!")
            return True
        else:
            print("‚ùå Failed to send template email!")
            return False
    except Exception as e:
        print(f"‚ùå Template email error: {str(e)}")
        return False


def check_configuration():
    """Check if all required SMTP settings are configured"""
    print("üîç Checking SMTP Configuration...")
    print("-" * 50)
    
    issues = []
    
    if not settings.SMTP_HOST:
        issues.append("‚ùå SMTP_HOST is not set")
    else:
        print(f"‚úÖ SMTP_HOST: {settings.SMTP_HOST}")
    
    if not settings.SMTP_PORT:
        issues.append("‚ùå SMTP_PORT is not set")
    else:
        print(f"‚úÖ SMTP_PORT: {settings.SMTP_PORT}")
    
    if not settings.SMTP_USERNAME:
        issues.append("‚ùå SMTP_USERNAME is not set")
    else:
        print(f"‚úÖ SMTP_USERNAME: {settings.SMTP_USERNAME}")
    
    if not settings.SMTP_PASSWORD:
        issues.append("‚ùå SMTP_PASSWORD is not set")
    else:
        print("‚úÖ SMTP_PASSWORD: [SET]")
    
    if not settings.FROM_EMAIL:
        issues.append("‚ùå FROM_EMAIL is not set")
    else:
        print(f"‚úÖ FROM_EMAIL: {settings.FROM_EMAIL}")
    
    print(f"‚úÖ SMTP_USE_TLS: {settings.SMTP_USE_TLS}")
    print(f"‚úÖ SMTP_USE_SSL: {settings.SMTP_USE_SSL}")
    print(f"‚úÖ FROM_NAME: {settings.FROM_NAME}")
    
    if issues:
        print("\n" + "="*50)
        print("‚ùå Configuration Issues Found:")
        for issue in issues:
            print(f"   {issue}")
        print("\nüí° Please update your .env file with proper SMTP settings")
        return False
    else:
        print("\n‚úÖ All SMTP settings are configured!")
        return True


async def main():
    """Main test function"""
    print("="*60)
    print("üîß SMTP Configuration Test Tool")
    print("="*60)
    
    # Check configuration
    config_ok = check_configuration()
    if not config_ok:
        print("\n‚ùå Please fix configuration issues before testing.")
        return
    
    print("\n" + "="*60)
    
    # Test connection
    connection_ok = await test_smtp_connection()
    if not connection_ok:
        print("\n‚ùå Please check your SMTP settings and try again.")
        return
    
    print("\n" + "="*60)
    
    # Ask user what they want to test
    while True:
        print("\nWhat would you like to test?")
        print("1. Send basic test email")
        print("2. Send template-based email")
        print("3. Exit")
        
        choice = input("Enter your choice (1-3): ").strip()
        
        if choice == "1":
            await send_test_email()
        elif choice == "2":
            await test_template_email()
        elif choice == "3":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid choice. Please try again.")


if __name__ == "__main__":
    print("üöÄ Starting SMTP test...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã Test interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {str(e)}")
